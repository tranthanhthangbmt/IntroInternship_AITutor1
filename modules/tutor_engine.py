import openai
import streamlit as st

# C·∫ßn c√≥ API key (c·∫•u h√¨nh ri√™ng)
openai.api_key = st.secrets.get("OPENAI_API_KEY", "")


def build_prompt(role, context, question):
    """
    X√¢y d·ª±ng prompt theo vai tr√≤ c·ªßa Tutor AI.
    """
    system_prompt = {
        "tutor": "B·∫°n l√† m·ªôt tr·ª£ gi·∫£ng AI gi·ªèi, gi·∫£i th√≠ch d·ªÖ hi·ªÉu, h·ªèi l·∫°i ƒë·ªÉ ki·ªÉm tra s·ª± hi·ªÉu b√†i.",
        "coach": "B·∫°n l√† m·ªôt hu·∫•n luy·ªán vi√™n h·ªçc t·∫≠p AI, gi√∫p sinh vi√™n ƒë·∫∑t m·ª•c ti√™u v√† ph·∫£n t∆∞.",
        "examiner": "B·∫°n ƒë√≥ng vai gi√°m kh·∫£o, ki·ªÉm tra ng∆∞·ªùi h·ªçc v·ªõi c√°c c√¢u h·ªèi kh√≥, y√™u c·∫ßu gi·∫£i th√≠ch chi ti·∫øt."
    }.get(role, "B·∫°n l√† tr·ª£ l√Ω AI gi√∫p ng∆∞·ªùi h·ªçc hi·ªÉu n·ªôi dung h·ªçc t·∫≠p.")

    return [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"T√†i li·ªáu: {context}\n\nC√¢u h·ªèi: {question}"}
    ]


def ask_tutor(question, context, role="tutor", model="gpt-3.5-turbo"):
    """
    G·ª≠i c√¢u h·ªèi t·ªõi API OpenAI v√† nh·∫≠n c√¢u tr·∫£ l·ªùi t·ª´ AI Tutor.
    """
    if not openai.api_key:
        return "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API Key cho OpenAI."

    try:
        messages = build_prompt(role, context, question)
        response = openai.ChatCompletion.create(
            model=model,
            messages=messages,
            temperature=0.7
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi AI: {e}"


def tutor_chat_interface():
    st.subheader("üí¨ H·ªèi ƒë√°p v·ªõi AI Tutor")
    role = st.selectbox("Ch·ªçn vai tr√≤ AI", ["tutor", "coach", "examiner"])

    if "lesson_progress" not in st.session_state:
        st.warning("‚ö†Ô∏è B·∫°n c·∫ßn t·∫£i t√†i li·ªáu v√† b·∫Øt ƒë·∫ßu m·ªôt phi√™n h·ªçc tr∆∞·ªõc.")
        return

    context_text = "\n\n".join(item["noi_dung"] for item in st.session_state["lesson_progress"])

    user_question = st.text_area("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n", height=100)
    if st.button("üöÄ G·ª≠i cho AI") and user_question.strip():
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            answer = ask_tutor(user_question, context_text, role=role)
            st.markdown("### üß† Tr·∫£ l·ªùi c·ªßa AI:")
            st.markdown(answer)

            # Ghi log
            from firestore_logger import save_exchange_to_firestore
            save_exchange_to_firestore(
                user_id=st.session_state.get("user_id", "anonymous"),
                lesson_source="context_memory",
                question=user_question,
                answer=answer,
                session_id=st.session_state.get("session_id", "session_unknown")
            )
